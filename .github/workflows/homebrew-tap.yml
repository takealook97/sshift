name: Update Homebrew Tap

on:
  push:
    tags:
      - "v*"

jobs:
  update-homebrew:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout tap repository
        uses: actions/checkout@v4
        with:
          repository: takealook97/homebrew-sshift
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-tap

      - name: Setup Homebrew
        run: |
          # Install Homebrew
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

          # Add Homebrew to PATH for current session
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

          # Add to PATH for subsequent steps
          echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH

          # Verify Homebrew installation
          /home/linuxbrew/.linuxbrew/bin/brew --version

      - name: Get Release Version
        id: version
        run: |
          # Get the latest release version from the main repository
          VERSION=$(curl -s "https://api.github.com/repos/takealook97/sshift/releases/latest" | jq -r '.tag_name')
          if [ "$VERSION" = "null" ] || [ -z "$VERSION" ]; then
            echo "❌ Failed to get latest release version"
            exit 1
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "Latest version: $VERSION"

      - name: Calculate SHA256
        id: sha256
        run: |
          VERSION=${{ steps.version.outputs.tag }}
          SOURCE_URL="https://github.com/takealook97/sshift/archive/refs/tags/${VERSION}.tar.gz"

          # Retry download if it fails
          for i in {1..3}; do
            echo "Attempt $i: Downloading source for SHA256 calculation..."
            SHA256=$(curl -sL "$SOURCE_URL" | shasum -a 256 | cut -d' ' -f1)
            if [ -n "$SHA256" ] && [ "$SHA256" != "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" ]; then
              echo "SHA256 calculated successfully: $SHA256"
              break
            else
              echo "Download failed or empty file, retrying..."
              sleep 2
            fi
          done

          if [ -z "$SHA256" ] || [ "$SHA256" = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" ]; then
            echo "❌ Failed to calculate SHA256 after 3 attempts"
            exit 1
          fi

          echo "sha256=$SHA256" >> $GITHUB_OUTPUT

      - name: Update Formula
        run: |
          cd homebrew-tap

          # Check if Formula directory exists
          if [ ! -d "Formula" ]; then
            echo "❌ Formula directory not found"
            exit 1
          fi

          # Check if sshift.rb exists in Formula directory
          if [ ! -f "Formula/sshift.rb" ]; then
            echo "❌ Formula/sshift.rb not found"
            exit 1
          fi

          # Update URL and SHA256 in Formula/sshift.rb
          VERSION=${{ steps.version.outputs.tag }}
          sed -i "s|url \".*\"|url \"https://github.com/takealook97/sshift/archive/refs/tags/${VERSION}.tar.gz\"|" Formula/sshift.rb
          sed -i "s/sha256 \".*\"/sha256 \"${{ steps.sha256.outputs.sha256 }}\"/" Formula/sshift.rb

          # Ensure sshpass dependency is included
          if ! grep -q "depends_on \"sshpass\"" Formula/sshift.rb; then
            # Add sshpass dependency after go dependency
            sed -i '/depends_on "go" => :build/a\  depends_on "sshpass"' Formula/sshift.rb
          fi

          echo "✅ Formula updated successfully"
          echo "Updated to version: ${{ steps.version.outputs.version }}"
          echo "SHA256: ${{ steps.sha256.outputs.sha256 }}"

      - name: Test Formula
        run: |
          cd homebrew-tap

          # Ensure Homebrew is in PATH
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

          # Test the formula without installing
          /home/linuxbrew/.linuxbrew/bin/brew audit Formula/sshift.rb || echo "Formula audit completed with warnings"

          # Test formula installation (dry run)
          /home/linuxbrew/.linuxbrew/bin/brew install --dry-run Formula/sshift.rb || echo "Formula installation test completed with warnings"

      - name: Commit and push
        run: |
          cd homebrew-tap

          # Show current git status
          echo "Current git status:"
          git status

          echo "Available branches:"
          git branch -a || echo "No branches found"

          echo "Remote information:"
          git remote -v || echo "No remotes found"

          # Show repository structure
          echo "Repository structure:"
          ls -la

          # Try to get the current branch name
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
          echo "Current branch: $CURRENT_BRANCH"

          # If we're in detached HEAD, try to find the default branch
          if [ "$CURRENT_BRANCH" = "HEAD" ] || [ "$CURRENT_BRANCH" = "unknown" ]; then
            echo "Detected detached HEAD, trying to find default branch..."
            
            # Try to get default branch from remote
            DEFAULT_BRANCH=$(git remote show origin 2>/dev/null | grep 'HEAD branch' | cut -d' ' -f5 || echo "")
            
            if [ -n "$DEFAULT_BRANCH" ]; then
              echo "Found default branch: $DEFAULT_BRANCH"
              git checkout $DEFAULT_BRANCH || {
                echo "Failed to checkout $DEFAULT_BRANCH, trying master..."
                git checkout master || {
                  echo "Failed to checkout master, trying main..."
                  git checkout main || {
                    echo "❌ Could not checkout any branch. Available branches:"
                    git branch -a
                    exit 1
                  }
                }
              }
            else
              echo "Could not determine default branch, trying common names..."
              git checkout master || git checkout main || {
                echo "❌ Could not checkout any branch"
                exit 1
              }
            fi
          fi

          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Check final status
          echo "Final branch: $(git branch --show-current)"
          echo "Git status:"
          git status

          git add Formula/sshift.rb

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            echo "Changes detected, committing..."
            git commit -m "Update sshift to ${{ steps.version.outputs.version }}"
            
            # Get current branch for push
            PUSH_BRANCH=$(git branch --show-current)
            echo "Pushing to branch: $PUSH_BRANCH"
            git push origin $PUSH_BRANCH
          fi
