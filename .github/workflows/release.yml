name: Build and Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            binary_name: sshift-linux-amd64
          - goos: darwin
            goarch: amd64
            binary_name: sshift-darwin-amd64
          - goos: darwin
            goarch: arm64
            binary_name: sshift-darwin-arm64
          - goos: windows
            goarch: amd64
            binary_name: sshift-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
        continue-on-error: true
        timeout-minutes: 5
        if: hashFiles('**/go.sum') != ''

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          go build -ldflags "-X main.Version=${{ github.ref_name }} -s -w" -o dist/${{ matrix.binary_name }} main.go

      - name: Verify binary
        run: |
          echo "üîç Verifying binary..."
          file dist/${{ matrix.binary_name }}
          ls -la dist/${{ matrix.binary_name }}

          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            echo "Windows binary created successfully"
          else
            chmod +x dist/${{ matrix.binary_name }}
            echo "‚úÖ Binary is executable"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: dist/${{ matrix.binary_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  homebrew:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"

      - name: Install Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo "$HOME/.homebrew/bin" >> $GITHUB_PATH

      - name: Calculate SHA256
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          SOURCE_URL="https://github.com/${{ github.repository }}/archive/refs/tags/${VERSION}.tar.gz"

          # Retry download if it fails
          for i in {1..3}; do
            echo "Attempt $i: Downloading source for SHA256 calculation..."
            SHA256=$(curl -sL "$SOURCE_URL" | shasum -a 256 | cut -d' ' -f1)
            if [ -n "$SHA256" ] && [ "$SHA256" != "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" ]; then
              echo "SHA256 calculated successfully: $SHA256"
              break
            else
              echo "Download failed or empty file, retrying..."
              sleep 2
            fi
          done

          if [ -z "$SHA256" ] || [ "$SHA256" = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" ]; then
            echo "‚ùå Failed to calculate SHA256 after 3 attempts"
            exit 1
          fi

          echo "SHA256=$SHA256" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update Formula
        run: |
          # Check if Formula directory exists
          if [ ! -d "Formula" ]; then
            echo "‚ùå Formula directory not found"
            exit 1
          fi

          # Check if sshift.rb exists
          if [ ! -f "Formula/sshift.rb" ]; then
            echo "‚ùå Formula/sshift.rb not found"
            exit 1
          fi

          # Update version and SHA256 in Formula
          sed -i "s/version \"[^\"]*\"/version \"$VERSION\"/" Formula/sshift.rb
          sed -i "s/sha256 \"[^\"]*\"/sha256 \"$SHA256\"/" Formula/sshift.rb

          echo "‚úÖ Formula updated successfully"

      - name: Test Formula
        run: |
          # Test the formula without installing
          brew audit --strict ./Formula/sshift.rb || echo "Formula audit completed with warnings"

          # Try to install from source (this might fail in CI environment)
          brew install --build-from-source ./Formula/sshift.rb || echo "Formula installation test completed with warnings"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/sshift.rb

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update Formula for version $VERSION"
            git push
          fi
